Here's a simple Flask web application for storing employee information. Below is the file structure, code for each file, and a sample `README.md`.

### File Structure

```
employee_info/
│
├── app/
│   ├── __init__.py
│   ├── routes.py
│   ├── models.py
│   └── templates/
│       ├── index.html
│       └── employee_form.html
│
├── main.py
└── README.md
```

### Code Files

#### 1. `main.py`

```python
from app import create_app

app = create_app()

if __name__ == '__main__':
    app.run(debug=True)
```

#### 2. `app/__init__.py`

```python
from flask import Flask
from .routes import main

def create_app():
    app = Flask(__name__)
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///employees.db'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    
    with app.app_context():
        from .models import db
        db.init_app(app)
        db.create_all()

    app.register_blueprint(main)
    return app
```

#### 3. `app/models.py`

```python
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Employee(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    position = db.Column(db.String(100), nullable=False)
    salary = db.Column(db.Float, nullable=False)

    def __repr__(self):
        return f'<Employee {self.name}>'
```

#### 4. `app/routes.py`

```python
from flask import Blueprint, render_template, request, redirect, url_for
from .models import db, Employee

main = Blueprint('main', __name__)

@main.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        name = request.form['name']
        position = request.form['position']
        salary = request.form['salary']
        
        new_employee = Employee(name=name, position=position, salary=salary)
        db.session.add(new_employee)
        db.session.commit()
        return redirect(url_for('main.index'))
    
    employees = Employee.query.all()
    return render_template('index.html', employees=employees)

@main.route('/add')
def add_employee():
    return render_template('employee_form.html')
```

#### 5. `app/templates/index.html`

```html
<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Info</title>
</head>
<body>
    <h1>Employee List</h1>
    <table>
        <tr>
            <th>Name</th>
            <th>Position</th>
            <th>Salary</th>
        </tr>
        {% for employee in employees %}
        <tr>
            <td>{{ employee.name }}</td>
            <td>{{ employee.position }}</td>
            <td>{{ employee.salary }}</td>
        </tr>
        {% endfor %}
    </table>
    <a href="/add">Add Employee</a>
</body>
</html>
```

#### 6. `app/templates/employee_form.html`

```html
<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Employee</title>
</head>
<body>
    <h1>Add Employee</h1>
    <form method="post" action="/">
        <label>Name: </label>
        <input type="text" name="name" required>
        <label>Position: </label>
        <input type="text" name="position" required>
        <label>Salary: </label>
        <input type="number" step="0.01" name="salary" required>
        <button type="submit">Add Employee</button>
    </form>
    <a href="/">Back to Employee List</a>
</body>
</html>
```

#### 7. `README.md`

```markdown
# Employee Info Flask App

This is a simple Flask web application to store and manage employee information.

## File Structure

```
employee_info/
│
├── app/
│   ├── __init__.py
│   ├── routes.py
│   ├── models.py
│   └── templates/
│       ├── index.html
│       └── employee_form.html
│
├── main.py
└── README.md
```

## Requirements

- Flask
- Flask-SQLAlchemy

## Setup

1. Create a virtual environment and activate it.
2. Install the required packages:
   ```bash
   pip install Flask Flask-SQLAlchemy
   ```
3. Run the application:
   ```bash
   python main.py
   ```

## Usage

- Navigate to `http://127.0.0.1:5000/` to view the employee list.
- Click on "Add Employee" to add new employee information.
```

### Note
Make sure to adjust the Python environment and install the required packages before running the application.